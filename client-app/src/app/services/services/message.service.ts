/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getMessagesByChatId } from '../fn/message/get-messages-by-chat-id';
import { GetMessagesByChatId$Params } from '../fn/message/get-messages-by-chat-id';
import { MessageResponse } from '../models/message-response';
import { sendMessage } from '../fn/message/send-message';
import { SendMessage$Params } from '../fn/message/send-message';
import { setMessagesToSeen } from '../fn/message/set-messages-to-seen';
import { SetMessagesToSeen$Params } from '../fn/message/set-messages-to-seen';
import { uploadMediaMessage } from '../fn/message/upload-media-message';
import { UploadMediaMessage$Params } from '../fn/message/upload-media-message';


/**
 * Message API
 */
@Injectable({ providedIn: 'root' })
export class MessageService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `setMessagesToSeen()` */
  static readonly SetMessagesToSeenPath = '/api/v1/message';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `setMessagesToSeen()` instead.
   *
   * This method doesn't expect any request body.
   */
  setMessagesToSeen$Response(params: SetMessagesToSeen$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return setMessagesToSeen(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `setMessagesToSeen$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  setMessagesToSeen(params: SetMessagesToSeen$Params, context?: HttpContext): Observable<void> {
    return this.setMessagesToSeen$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `uploadMediaMessage()` */
  static readonly UploadMediaMessagePath = '/api/v1/message/upload-media';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadMediaMessage()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadMediaMessage$Response(params: UploadMediaMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return uploadMediaMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadMediaMessage$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadMediaMessage(params: UploadMediaMessage$Params, context?: HttpContext): Observable<void> {
    return this.uploadMediaMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `sendMessage()` */
  static readonly SendMessagePath = '/api/v1/message/send';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `sendMessage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendMessage$Response(params: SendMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return sendMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `sendMessage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendMessage(params: SendMessage$Params, context?: HttpContext): Observable<void> {
    return this.sendMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getMessagesByChatId()` */
  static readonly GetMessagesByChatIdPath = '/api/v1/message/chat/{chat-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMessagesByChatId()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMessagesByChatId$Response(params: GetMessagesByChatId$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MessageResponse>>> {
    return getMessagesByChatId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMessagesByChatId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMessagesByChatId(params: GetMessagesByChatId$Params, context?: HttpContext): Observable<Array<MessageResponse>> {
    return this.getMessagesByChatId$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MessageResponse>>): Array<MessageResponse> => r.body)
    );
  }

}
